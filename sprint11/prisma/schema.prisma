// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  email             String            @unique
  nickname          String?           @unique
  image             String?
  encryptedPassword String?
  refreshToken      String?
  provider          String            @default("local")
  providerId        String?           @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  product           Product[]
  productComments   ProductComment[]
  articles          Article[]
  articleComments   ArticleComment[]
  productFavorites  ProductFavorite[]
  articleFavorites  ArticleFavorite[]
}

model Product {
  id              String            @id @default(uuid())
  name            String
  description     String
  price           Float
  tags            String[]
  images          String[]
  favoriteCount   Int
  ownerId         Int
  owner           User              @relation(fields: [ownerId], references: [id])
  productComments ProductComment[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ProductFavorite ProductFavorite[]
}

model ProductFavorite {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    Int
  productId String

  @@id([userId, productId])
}

model Article {
  id              String            @id @default(uuid())
  title           String
  favoriteCount   Int               @default(0)
  authorId        Int?
  author          User?             @relation(fields: [authorId], references: [id], onDelete: SetNull)
  content         String
  images          String[]
  articleComments ArticleComment[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ArticleFavorite ArticleFavorite[]
}

model ArticleFavorite {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  userId    Int
  articleId String

  @@id([userId, articleId])
}

model ProductComment {
  id          String   @id @default(uuid())
  content     String
  productId   String?
  product     Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  commenterId Int?
  commenter   User?    @relation(fields: [commenterId], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId, createdAt(sort: Desc)])
  @@index([commenterId, updatedAt(sort: Desc)])
}

model ArticleComment {
  id          String   @id @default(uuid())
  content     String
  articleId   String?
  article     Article? @relation(fields: [articleId], references: [id], onDelete: SetNull)
  commenterId Int?
  commenter   User?    @relation(fields: [commenterId], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([articleId, createdAt(sort: Desc)])
  @@index([commenterId, updatedAt(sort: Desc)])
}
